plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
}
springBoot {
    // Your REAL app main class (not the printer)
    mainClass.set('com.github.dimitryivaniuta.videometadata.VideoMetadataServiceApplication')
}
group = 'com.github.dimitryivaniuta'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    graphqlAnnotationsVersion = '21.5'
    graphqlJavaVersion        = '24.1'
    resilience4jVersion = '2.3.0'
    springdocVersion   = '2.8.9'
    flywayVersion        = '11.10.3'
}

dependencies {
    // Core
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'   // R2DBC driver
    runtimeOnly 'org.postgresql:postgresql'         // need for Flyway (JDBC)


    // Security: WebFlux + OAuth2 resource‐server + JOSE (Nimbus)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'com.nimbusds:nimbus-jose-jwt:10.3.1'
    // code‑first schema generation
//    implementation "io.github.graphql-java:graphql-java-annotations:${graphqlAnnotationsVersion}"  // :contentReference[oaicite:0]{index=0}
//    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"                            // core engine

    // Spring for GraphQL + WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.graphql-java:graphql-java-extended-scalars:24.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Redis caching/reactive
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    // Resilience4j (retry, rate‑limit, circuit‑breaker)
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"

    // Flyway migrations
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"

    // PostgreSQL driver
    runtimeOnly 'org.postgresql:postgresql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // OpenAPI / Swagger UI
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocVersion}"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

checkstyle {
    toolVersion    = '10.12.0'
    configFile     = rootProject.file('config/checkstyle.xml')
    showViolations = true
}


// Enable the runtime schema printer
//    (Spring GraphQL will emit schema.graphqls under resources on startup.)
ext {
    schemaPrintProfile = 'schema-print'
}

// GraphQL schema printing (build-time)
def schemaOutputDir  = layout.buildDirectory.dir("generated/graphql")
def schemaOutputFile = schemaOutputDir.map { it.file("schema.graphqls").asFile }.get()

tasks.register("printSchema", JavaExec) {
    group = "build"
    description = "Boot minimal schema printer app to generate GraphQL SDL."

    classpath = sourceSets.main.runtimeClasspath
    // IMPORTANT: run the PRINTER app
    mainClass.set("com.github.dimitryivaniuta.videometadata.graphql.schema.SchemaPrinterApplication")

    // Activate the profile and pass file target
    systemProperty "spring.profiles.active", "schema-print"
    systemProperty "app.graphql.schema.output", schemaOutputFile.absolutePath
    systemProperty "spring.main.web-application-type", "none"

    // Extra belt-and-braces excludes (same as YAML)
    systemProperty "spring.autoconfigure.exclude",
            "org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration," +
                    "org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration"

    dependsOn(tasks.named("classes"))
}

tasks.named("bootJar") {
    dependsOn(tasks.named("printSchema"))
    from(schemaOutputDir) {
        include "schema.graphqls"
        into ""   // BOOT-INF/classes
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // compile to Java 21 bytecode
    options.release  = 21
}

tasks.named('test') {
    useJUnitPlatform()
}