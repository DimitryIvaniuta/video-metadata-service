plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
}

group = 'com.github.dimitryivaniuta'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    graphqlAnnotationsVersion = '21.5'
    graphqlJavaVersion        = '24.1'
    resilience4jVersion = '2.3.0'
    springdocVersion   = '2.8.9'
}

dependencies {
    // Core
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'   // R2DBC driver
    runtimeOnly 'org.postgresql:postgresql'         // need for Flyway (JDBC)


    // Security: WebFlux + OAuth2 resource‐server + JOSE (Nimbus)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'com.nimbusds:nimbus-jose-jwt:10.3.1'

    // code‑first schema generation
    implementation "io.github.graphql-java:graphql-java-annotations:${graphqlAnnotationsVersion}"  // :contentReference[oaicite:0]{index=0}
    implementation "com.graphql-java:graphql-java:${graphqlJavaVersion}"                            // core engine

    // Spring for GraphQL + WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Redis caching/reactive
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

    // Resilience4j (retry, rate‑limit, circuit‑breaker)
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"

    // Flyway migrations
    implementation 'org.flywaydb:flyway-core:11.10.2'
    implementation 'org.flywaydb:flyway-database-postgresql:11.10.2'

    // PostgreSQL driver
    runtimeOnly 'org.postgresql:postgresql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // OpenAPI / Swagger UI
    implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springdocVersion}"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

checkstyle {
    toolVersion    = '10.12.0'
    configFile     = rootProject.file('config/checkstyle.xml')
    showViolations = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    // compile to Java 21 bytecode
    options.release  = 21
}

tasks.named('test') {
    useJUnitPlatform()
}
